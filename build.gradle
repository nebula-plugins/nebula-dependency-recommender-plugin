/*
 * Copyright 2014-2019 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id 'com.netflix.nebula.plugin-plugin' version '21.3.3'
}

description = 'Allows projects to leave off version numbers in dependencies section and have versions recommended by other sources'

contacts {
    'nebula-plugins-oss@netflix.com' {
        moniker 'Nebula Plugins Maintainers'
        github 'nebula-plugins'
    }
}

compileGroovy.groovyOptions.configurationScript = file('src/groovyCompile/groovycConfig.groovy')

dependencies {
    implementation 'com.netflix.nebula:nebula-gradle-interop:latest.release'
    implementation 'org.apache.maven:maven-model-builder:3.8.3'
    implementation 'com.google.guava:guava:20.0'
    testImplementation ('org.xmlunit:xmlunit-core:2.6.0') {
        exclude module: 'hamcrest-core'
    }
}

gradlePlugin {
    plugins {
        dependencyRecommender {
            id = 'com.netflix.nebula.dependency-recommender'
            displayName = 'Nebula Dependency Recommender'
            description = project.description
            implementationClass = 'netflix.nebula.dependency.recommender.DependencyRecommendationsPlugin'
            tags.set(['nebula', 'dependency', 'dependencies', 'recommender', 'recommend'])
        }
    }
}

/**
 * This is temporary until we move all tests to testkit
 */
tasks.withType(Test).configureEach {
    Provider<String> jdkVersionForTestsEnvVariable = providers.environmentVariable("JDK_VERSION_FOR_TESTS")
    Integer jdkVersionForTests = jdkVersionForTestsEnvVariable.isPresent() ? jdkVersionForTestsEnvVariable.get().toInteger() : 17
    if(jdkVersionForTests >= 17) {
        jvmArgs = [
                '--add-opens=java.base/java.lang=ALL-UNNAMED',
                '--add-opens=java.base/java.util=ALL-UNNAMED',
                '--add-opens=java.base/java.lang.invoke=ALL-UNNAMED',
                '--add-opens=java.base/java.net=ALL-UNNAMED',
                '--add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED'

        ]
    }
}
